{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","JSON","parse","responseText","send","objeto","setRequestHeader","stringify","fetch","then","_handleErrors","res","json","headers","method","body","ok","Error","statusText"],"mappings":";;;;;;IAAMA,W;;;;;;;+BAEKC,G,EAAK;AACR,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,MAAM,IAAIC,cAAJ,EAAV;;AAEAD,oBAAIE,IAAJ,CAAS,KAAT,EAAgBN,GAAhB;;AAEAI,oBAAIG,kBAAJ,GAAyB,YAAM;AAC3B,wBAAIH,IAAII,UAAJ,IAAkB,CAAtB,EAAyB;AAAE;AACvB,4BAAIJ,IAAIK,MAAJ,IAAc,GAAlB,EAAuB;AAAE;AACrBP,oCAAQQ,KAAKC,KAAL,CAAWP,IAAIQ,YAAf,CAAR;AACH,yBAFD,MAEO;AACHT,mCAAOC,IAAIQ,YAAX;AACH;AACJ;AACJ,iBARD;;AAUAR,oBAAIS,IAAJ;AACH,aAhBM,CAAP;AAiBH;;;gCAEOb,G,EAAKc,M,EAAQ;AACjB,mBAAO,IAAIb,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,MAAM,IAAIC,cAAJ,EAAV;;AAEAD,oBAAIE,IAAJ,CAAS,MAAT,EAAiBN,GAAjB,EAAsB,IAAtB;AACAI,oBAAIW,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;;AAEAX,oBAAIG,kBAAJ,GAAyB,YAAM;AAC3B,wBAAIH,IAAII,UAAJ,IAAkB,CAAtB,EAAyB;AAAE;AACvB,4BAAIJ,IAAIK,MAAJ,IAAc,GAAlB,EAAuB;AAAE;AACrBP,oCAAQQ,KAAKC,KAAL,CAAWP,IAAIQ,YAAf,CAAR;AACH,yBAFD,MAEO;AACHT,mCAAOC,IAAIQ,YAAX;AACH;AACJ;AACJ,iBARD;;AAUAR,oBAAIS,IAAJ,CAASH,KAAKM,SAAL,CAAeF,MAAf,CAAT;AACH,aAjBM,CAAP;AAkBH;;AAED;;;;4BAEId,G,EAAK;AAAA;;AACL,mBAAOiB,MAAMjB,GAAN,EACFkB,IADE,CACG;AAAA,uBAAO,MAAKC,aAAL,CAAmBC,GAAnB,CAAP;AAAA,aADH,EAEFF,IAFE,CAEG;AAAA,uBAAOE,IAAIC,IAAJ,EAAP;AAAA,aAFH,CAAP;AAGH;;;6BAEIrB,G,EAAKc,M,EAAQ;AAAA;;AACd,mBAAOG,MAAMjB,GAAN,EACH;AACIsB,yBAAS,EAAE,gBAAgB,kBAAlB,EADb;AAEIC,wBAAQ,MAFZ;AAGIC,sBAAMd,KAAKM,SAAL,CAAeF,MAAf;AAHV,aADG,EAMFI,IANE,CAMG;AAAA,uBAAO,OAAKC,aAAL,CAAmBC,GAAnB,CAAP;AAAA,aANH,CAAP;AAOH;;;sCAEaA,G,EAAK;AACf,gBAAI,CAACA,IAAIK,EAAT,EACI,MAAM,IAAIC,KAAJ,CAAUN,IAAIO,UAAd,CAAN;AACJ,mBAAOP,GAAP;AACH","file":"HttpService.js","sourcesContent":["class HttpService {\r\n\r\n    getES6(url) {\r\n        return new Promise((resolve, reject) => {\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            xhr.open('GET', url);\r\n\r\n            xhr.onreadystatechange = () => {\r\n                if (xhr.readyState == 4) { // Se a requisição foi concluída\r\n                    if (xhr.status == 200) { // Se a resposta foi OK\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n\r\n            xhr.send();\r\n        });\r\n    }\r\n\r\n    postES6(url, objeto) {\r\n        return new Promise((resolve, reject) => {\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            xhr.open('POST', url, true);\r\n            xhr.setRequestHeader('Content-type', 'application/json');\r\n\r\n            xhr.onreadystatechange = () => {\r\n                if (xhr.readyState == 4) { // Se a requisição foi concluída\r\n                    if (xhr.status == 200) { // Se a resposta foi OK\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n\r\n            xhr.send(JSON.stringify(objeto));\r\n        });\r\n    }\r\n\r\n    // Requisições utilizando Fetch API inserida no EC7 (ES2016)\r\n\r\n    get(url) {\r\n        return fetch(url)\r\n            .then(res => this._handleErrors(res))\r\n            .then(res => res.json());\r\n    }\r\n\r\n    post(url, objeto) {\r\n        return fetch(url,\r\n            {\r\n                headers: { 'Content-type': 'application/json' },\r\n                method: 'post',\r\n                body: JSON.stringify(objeto)\r\n            })\r\n            .then(res => this._handleErrors(res))\r\n    }\r\n\r\n    _handleErrors(res) {\r\n        if (!res.ok)\r\n            throw new Error(res.statusText);\r\n        return res;\r\n    }\r\n}"]}