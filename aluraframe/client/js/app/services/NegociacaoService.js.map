{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","get","then","negociacoes","map","Negociacao","Date","obj","data","quantidade","valor","catch","console","log","erro","Error","negociacao","post","DateHelper","dataParaTexto","resposta","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","Promise","all","obterNegociacoesSemana","obterNegociacoesSemanaAnterior","obterNegociacoesSemanaRetrasada","arrayDeArraysDeResposta","reduce","arrayDeResposta","concat","filter","some","ehIgual","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesSemana() {\r\n\r\n        return this._http\r\n            .get('negociacoes/semana')\r\n            .then((negociacoes) =>\r\n                negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível importar as negociações dessa semana');\r\n            });\r\n    }\r\n\r\n    obterNegociacoesSemanaAnterior() {\r\n\r\n        return this._http\r\n            .get('negociacoes/anterior')\r\n            .then((negociacoes) =>\r\n                negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível importar as negociações da semana anterior');\r\n            });\r\n    }\r\n\r\n    obterNegociacoesSemanaRetrasada() {\r\n\r\n        return this._http\r\n            .get('negociacoes/retrasada')\r\n            .then((negociacoes) =>\r\n                negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível importar as negociações da semana retrasada');\r\n            });\r\n    }\r\n\r\n    enviarNegociacao(negociacao) {\r\n        return this._http\r\n            .post('/negociacoes', {\r\n                data: DateHelper.dataParaTexto(negociacao.data),\r\n                quantidade: negociacao.quantidade,\r\n                valor: negociacao.valor\r\n            })\r\n            .then(resposta => resposta)\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível enviar a negociação');\r\n            });\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adicionada com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível adicionar a negociação');\r\n            });\r\n    }\r\n\r\n    lista() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível listar as negociações');\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as negociações');\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        return Promise\r\n            .all([\r\n                this.obterNegociacoesSemana(),\r\n                this.obterNegociacoesSemanaAnterior(),\r\n                this.obterNegociacoesSemanaRetrasada()])\r\n            .then(arrayDeArraysDeResposta => \r\n                arrayDeArraysDeResposta\r\n                    .reduce((negociacoes, arrayDeResposta) => negociacoes.concat(arrayDeResposta), [])\r\n                    .filter(negociacao =>\r\n                        !listaAtual.some(negociacaoExistente =>\r\n                            negociacao.ehIgual(negociacaoExistente))))\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível importar as negociações');\r\n            })\r\n    }\r\n}"]}