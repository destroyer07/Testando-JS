{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","dbVersion","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","conn","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AACA,IAAIA,oBAAqB,YAAY;;AAEjC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,YAAY,CAAlB;AACA,QAAMC,SAAS,SAAf;;AAEA,QAAIC,aAAa,IAAjB;;AAEA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,SAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAI,CAACf,UAAL,EAAiB;AACbA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGH;;AAEDE,gCAAQQ,EAAEC,MAAF,CAASC,MAAjB;AACH,qBAVD;;AAYAR,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAd,EAAsBO,KAAtB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAMH,iBAzBM,CAAP;AA0BH;AAjCL;AAAA;AAAA,0CAmCyBC,IAnCzB,EAmC+B;AACvBzB,uBAAO0B,OAAP,CAAe,iBAAS;AACpB,wBAAID,KAAKE,gBAAL,CAAsBC,QAAtB,CAA+BC,KAA/B,CAAJ,EACIJ,KAAKR,MAAL,CAAYa,iBAAZ,CAA8BD,KAA9B;;AAEJJ,yBAAKM,iBAAL,CAAuBF,KAAvB,EAA8B,EAAEG,eAAe,IAAjB,EAA9B;AACH,iBALD;AAMH;AA1CL;AAAA;AAAA,8CA4C6B;AACrB,oBAAI7B,UAAJ,EAAgB;AACZC;AACAD,iCAAa,IAAb;AACH;AACJ;AAjDL;;AAAA;AAAA;AAoDH,CA9DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["\r\nvar ConnectionFactory = (function () {\r\n\r\n    const stores = ['negociacoes'];\r\n    const dbVersion = 2;\r\n    const dbName = 'testedb';\r\n\r\n    var connection = null;\r\n\r\n    var close = null;\r\n\r\n    return class ConnectionFactory {\r\n\r\n        constructor() {\r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n        }\r\n\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n                let openRequest = window.indexedDB.open(dbName, dbVersion);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n                    if (!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function() {\r\n                            throw new Error('Você não pode fechar diretamente a conexão!');\r\n                        };\r\n                    }\r\n\r\n                    resolve(e.target.result);\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target, error);\r\n                    reject(e.target.error.name);\r\n                };\r\n\r\n\r\n            });\r\n        }\r\n\r\n        static _createStores(conn) {\r\n            stores.forEach(store => {\r\n                if (conn.objectStoreNames.contains(store))\r\n                    conn.result.deleteObjectStore(store);\r\n\r\n                conn.createObjectStore(store, { autoIncrement: true });\r\n            });\r\n        }\r\n\r\n        static closeConnection() {\r\n            if (connection) {\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n\r\n})();"]}